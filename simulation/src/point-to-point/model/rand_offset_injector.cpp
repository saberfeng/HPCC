#include "rand_offset_injector.h"

namespace rand_offset{

void RandOffsetInjector::initialize(const vector<shared_ptr<FlowInputEntry>>& flows, 
                                ifstream& topo_file,
                                const map<Ptr<Node>, map<Ptr<Node>, vector<Ptr<Node>>>> &next_hop,
                                const NodeContainer &node_container){
    // jackson_model.initialize(flows, topo_file, next_hop, node_container);
}

pair<vector<long double>, vector<long double>> RandOffsetInjector::calcStateProb(){
    // return jackson_model.calcStateProb();
}

void RandOffsetInjector::init_flow2range_s(){
    // for(const auto& node_flows_p : jackson_model.getNode2Flows()){
    //     const auto& flows = node_flows_p.second;
    //     for(const auto& flow_ptr : flows){
    //         // 80Mb, 100Gbps, transtime 0.0008s; offset = 1/2 * transtime
    //         flow2range_s[flow_ptr] = 0.0004; // 400us
    //     }
    // }
}

void RandOffsetInjector::gen_offset(){
    // generate offset for each flow
    // the offset is the time difference between the start time of the flow and the start time of the first flow
    // the offset is in the range of [0, offset)
    // the offset is in the unit of s
    // the offset is generated by a uniform distribution
    // init_flow2range_s();
    // const auto& node2flows = jackson_model.getNode2Flows();
    // unordered_map<shared_ptr<FlowInputEntry>, long double> 
    //     flow2offsets;
    // for(const auto& node_flows : node2flows){
    //     const auto& flows = node_flows.second;
    //     for(const auto& flow_ptr : flows){
    //         double offset_s = ((double)rand() / RAND_MAX)
    //                              * flow2range_s[flow_ptr];
    //         flow_ptr->offset = Seconds(offset_s);
    //     }
    // }
}

}// namespace rand_offset